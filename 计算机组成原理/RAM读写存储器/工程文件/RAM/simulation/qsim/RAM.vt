// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/25/2018 09:42:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    RAM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RAM_vlg_sample_tst(
	choose,
	cin,
	clk,
	sampler_tx
);
input [1:0] choose;
input [15:0] cin;
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(choose or cin or clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module RAM_vlg_check_tst (
	address,
	clk_out,
	count_out,
	dataout,
	sampler_rx
);
input [11:0] address;
input  clk_out;
input  count_out;
input [15:0] dataout;
input sampler_rx;

reg [11:0] address_expected;
reg  clk_out_expected;
reg  count_out_expected;
reg [15:0] dataout_expected;

reg [11:0] address_prev;
reg  clk_out_prev;
reg  count_out_prev;
reg [15:0] dataout_prev;

reg [11:0] address_expected_prev;
reg  clk_out_expected_prev;
reg  count_out_expected_prev;
reg [15:0] dataout_expected_prev;

reg [11:0] last_address_exp;
reg  last_clk_out_exp;
reg  last_count_out_exp;
reg [15:0] last_dataout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	address_prev = address;
	clk_out_prev = clk_out;
	count_out_prev = count_out;
	dataout_prev = dataout;
end

// update expected /o prevs

always @(trigger)
begin
	address_expected_prev = address_expected;
	clk_out_expected_prev = clk_out_expected;
	count_out_expected_prev = count_out_expected;
	dataout_expected_prev = dataout_expected;
end



// expected clk_out
initial
begin
	clk_out_expected = 1'bX;
end 

// expected count_out
initial
begin
	count_out_expected = 1'bX;
end 
// expected dataout[ 15 ]
initial
begin
	dataout_expected[15] = 1'bX;
end 
// expected dataout[ 14 ]
initial
begin
	dataout_expected[14] = 1'bX;
end 
// expected dataout[ 13 ]
initial
begin
	dataout_expected[13] = 1'bX;
end 
// expected dataout[ 12 ]
initial
begin
	dataout_expected[12] = 1'bX;
end 
// expected dataout[ 11 ]
initial
begin
	dataout_expected[11] = 1'bX;
end 
// expected dataout[ 10 ]
initial
begin
	dataout_expected[10] = 1'bX;
end 
// expected dataout[ 9 ]
initial
begin
	dataout_expected[9] = 1'bX;
end 
// expected dataout[ 8 ]
initial
begin
	dataout_expected[8] = 1'bX;
end 
// expected dataout[ 7 ]
initial
begin
	dataout_expected[7] = 1'bX;
end 
// expected dataout[ 6 ]
initial
begin
	dataout_expected[6] = 1'bX;
end 
// expected dataout[ 5 ]
initial
begin
	dataout_expected[5] = 1'bX;
end 
// expected dataout[ 4 ]
initial
begin
	dataout_expected[4] = 1'bX;
end 
// expected dataout[ 3 ]
initial
begin
	dataout_expected[3] = 1'bX;
end 
// expected dataout[ 2 ]
initial
begin
	dataout_expected[2] = 1'bX;
end 
// expected dataout[ 1 ]
initial
begin
	dataout_expected[1] = 1'bX;
end 
// expected dataout[ 0 ]
initial
begin
	dataout_expected[0] = 1'bX;
end 
// expected address[ 11 ]
initial
begin
	address_expected[11] = 1'bX;
end 
// expected address[ 10 ]
initial
begin
	address_expected[10] = 1'bX;
end 
// expected address[ 9 ]
initial
begin
	address_expected[9] = 1'bX;
end 
// expected address[ 8 ]
initial
begin
	address_expected[8] = 1'bX;
end 
// expected address[ 7 ]
initial
begin
	address_expected[7] = 1'bX;
end 
// expected address[ 6 ]
initial
begin
	address_expected[6] = 1'bX;
end 
// expected address[ 5 ]
initial
begin
	address_expected[5] = 1'bX;
end 
// expected address[ 4 ]
initial
begin
	address_expected[4] = 1'bX;
end 
// expected address[ 3 ]
initial
begin
	address_expected[3] = 1'bX;
end 
// expected address[ 2 ]
initial
begin
	address_expected[2] = 1'bX;
end 
// expected address[ 1 ]
initial
begin
	address_expected[1] = 1'bX;
end 
// expected address[ 0 ]
initial
begin
	address_expected[0] = 1'bX;
end 
// generate trigger
always @(address_expected or address or clk_out_expected or clk_out or count_out_expected or count_out or dataout_expected or dataout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected address = %b | expected clk_out = %b | expected count_out = %b | expected dataout = %b | ",address_expected_prev,clk_out_expected_prev,count_out_expected_prev,dataout_expected_prev);
	$display("| real address = %b | real clk_out = %b | real count_out = %b | real dataout = %b | ",address_prev,clk_out_prev,count_out_prev,dataout_prev);
`endif
	if (
		( address_expected_prev[0] !== 1'bx ) && ( address_prev[0] !== address_expected_prev[0] )
		&& ((address_expected_prev[0] !== last_address_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[0] = address_expected_prev[0];
	end
	if (
		( address_expected_prev[1] !== 1'bx ) && ( address_prev[1] !== address_expected_prev[1] )
		&& ((address_expected_prev[1] !== last_address_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[1] = address_expected_prev[1];
	end
	if (
		( address_expected_prev[2] !== 1'bx ) && ( address_prev[2] !== address_expected_prev[2] )
		&& ((address_expected_prev[2] !== last_address_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[2] = address_expected_prev[2];
	end
	if (
		( address_expected_prev[3] !== 1'bx ) && ( address_prev[3] !== address_expected_prev[3] )
		&& ((address_expected_prev[3] !== last_address_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[3] = address_expected_prev[3];
	end
	if (
		( address_expected_prev[4] !== 1'bx ) && ( address_prev[4] !== address_expected_prev[4] )
		&& ((address_expected_prev[4] !== last_address_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[4] = address_expected_prev[4];
	end
	if (
		( address_expected_prev[5] !== 1'bx ) && ( address_prev[5] !== address_expected_prev[5] )
		&& ((address_expected_prev[5] !== last_address_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[5] = address_expected_prev[5];
	end
	if (
		( address_expected_prev[6] !== 1'bx ) && ( address_prev[6] !== address_expected_prev[6] )
		&& ((address_expected_prev[6] !== last_address_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[6] = address_expected_prev[6];
	end
	if (
		( address_expected_prev[7] !== 1'bx ) && ( address_prev[7] !== address_expected_prev[7] )
		&& ((address_expected_prev[7] !== last_address_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[7] = address_expected_prev[7];
	end
	if (
		( address_expected_prev[8] !== 1'bx ) && ( address_prev[8] !== address_expected_prev[8] )
		&& ((address_expected_prev[8] !== last_address_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[8] = address_expected_prev[8];
	end
	if (
		( address_expected_prev[9] !== 1'bx ) && ( address_prev[9] !== address_expected_prev[9] )
		&& ((address_expected_prev[9] !== last_address_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[9] = address_expected_prev[9];
	end
	if (
		( address_expected_prev[10] !== 1'bx ) && ( address_prev[10] !== address_expected_prev[10] )
		&& ((address_expected_prev[10] !== last_address_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[10] = address_expected_prev[10];
	end
	if (
		( address_expected_prev[11] !== 1'bx ) && ( address_prev[11] !== address_expected_prev[11] )
		&& ((address_expected_prev[11] !== last_address_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[11] = address_expected_prev[11];
	end
	if (
		( clk_out_expected_prev !== 1'bx ) && ( clk_out_prev !== clk_out_expected_prev )
		&& ((clk_out_expected_prev !== last_clk_out_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_out_expected_prev);
		$display ("     Real value = %b", clk_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clk_out_exp = clk_out_expected_prev;
	end
	if (
		( count_out_expected_prev !== 1'bx ) && ( count_out_prev !== count_out_expected_prev )
		&& ((count_out_expected_prev !== last_count_out_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_out_expected_prev);
		$display ("     Real value = %b", count_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_count_out_exp = count_out_expected_prev;
	end
	if (
		( dataout_expected_prev[0] !== 1'bx ) && ( dataout_prev[0] !== dataout_expected_prev[0] )
		&& ((dataout_expected_prev[0] !== last_dataout_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[0] = dataout_expected_prev[0];
	end
	if (
		( dataout_expected_prev[1] !== 1'bx ) && ( dataout_prev[1] !== dataout_expected_prev[1] )
		&& ((dataout_expected_prev[1] !== last_dataout_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[1] = dataout_expected_prev[1];
	end
	if (
		( dataout_expected_prev[2] !== 1'bx ) && ( dataout_prev[2] !== dataout_expected_prev[2] )
		&& ((dataout_expected_prev[2] !== last_dataout_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[2] = dataout_expected_prev[2];
	end
	if (
		( dataout_expected_prev[3] !== 1'bx ) && ( dataout_prev[3] !== dataout_expected_prev[3] )
		&& ((dataout_expected_prev[3] !== last_dataout_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[3] = dataout_expected_prev[3];
	end
	if (
		( dataout_expected_prev[4] !== 1'bx ) && ( dataout_prev[4] !== dataout_expected_prev[4] )
		&& ((dataout_expected_prev[4] !== last_dataout_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[4] = dataout_expected_prev[4];
	end
	if (
		( dataout_expected_prev[5] !== 1'bx ) && ( dataout_prev[5] !== dataout_expected_prev[5] )
		&& ((dataout_expected_prev[5] !== last_dataout_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[5] = dataout_expected_prev[5];
	end
	if (
		( dataout_expected_prev[6] !== 1'bx ) && ( dataout_prev[6] !== dataout_expected_prev[6] )
		&& ((dataout_expected_prev[6] !== last_dataout_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[6] = dataout_expected_prev[6];
	end
	if (
		( dataout_expected_prev[7] !== 1'bx ) && ( dataout_prev[7] !== dataout_expected_prev[7] )
		&& ((dataout_expected_prev[7] !== last_dataout_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[7] = dataout_expected_prev[7];
	end
	if (
		( dataout_expected_prev[8] !== 1'bx ) && ( dataout_prev[8] !== dataout_expected_prev[8] )
		&& ((dataout_expected_prev[8] !== last_dataout_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[8] = dataout_expected_prev[8];
	end
	if (
		( dataout_expected_prev[9] !== 1'bx ) && ( dataout_prev[9] !== dataout_expected_prev[9] )
		&& ((dataout_expected_prev[9] !== last_dataout_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[9] = dataout_expected_prev[9];
	end
	if (
		( dataout_expected_prev[10] !== 1'bx ) && ( dataout_prev[10] !== dataout_expected_prev[10] )
		&& ((dataout_expected_prev[10] !== last_dataout_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[10] = dataout_expected_prev[10];
	end
	if (
		( dataout_expected_prev[11] !== 1'bx ) && ( dataout_prev[11] !== dataout_expected_prev[11] )
		&& ((dataout_expected_prev[11] !== last_dataout_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[11] = dataout_expected_prev[11];
	end
	if (
		( dataout_expected_prev[12] !== 1'bx ) && ( dataout_prev[12] !== dataout_expected_prev[12] )
		&& ((dataout_expected_prev[12] !== last_dataout_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[12] = dataout_expected_prev[12];
	end
	if (
		( dataout_expected_prev[13] !== 1'bx ) && ( dataout_prev[13] !== dataout_expected_prev[13] )
		&& ((dataout_expected_prev[13] !== last_dataout_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[13] = dataout_expected_prev[13];
	end
	if (
		( dataout_expected_prev[14] !== 1'bx ) && ( dataout_prev[14] !== dataout_expected_prev[14] )
		&& ((dataout_expected_prev[14] !== last_dataout_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[14] = dataout_expected_prev[14];
	end
	if (
		( dataout_expected_prev[15] !== 1'bx ) && ( dataout_prev[15] !== dataout_expected_prev[15] )
		&& ((dataout_expected_prev[15] !== last_dataout_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[15] = dataout_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module RAM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] choose;
reg [15:0] cin;
reg clk;
// wires                                               
wire [11:0] address;
wire clk_out;
wire count_out;
wire [15:0] dataout;

wire sampler;                             

// assign statements (if any)                          
RAM i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.choose(choose),
	.cin(cin),
	.clk(clk),
	.clk_out(clk_out),
	.count_out(count_out),
	.dataout(dataout)
);

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 
// choose[ 1 ]
initial
begin
	choose[1] = 1'b0;
	choose[1] = #20000 1'b1;
	choose[1] = #10000 1'b0;
	choose[1] = #10000 1'b1;
	choose[1] = #10000 1'b0;
	choose[1] = #40000 1'b1;
	choose[1] = #10000 1'b0;
	choose[1] = #10000 1'b1;
	choose[1] = #10000 1'b0;
	choose[1] = #40000 1'b1;
	choose[1] = #20000 1'b0;
	choose[1] = #40000 1'b1;
	choose[1] = #20000 1'b0;
	choose[1] = #40000 1'b1;
	choose[1] = #20000 1'b0;
	choose[1] = #40000 1'b1;
	choose[1] = #20000 1'b0;
	choose[1] = #30000 1'b1;
	choose[1] = #150000 1'b0;
	choose[1] = #30000 1'b1;
	choose[1] = #130000 1'b0;
end 
// choose[ 0 ]
initial
begin
	choose[0] = 1'b0;
	choose[0] = #10000 1'b1;
	choose[0] = #40000 1'b0;
	choose[0] = #30000 1'b1;
	choose[0] = #40000 1'b0;
	choose[0] = #30000 1'b1;
	choose[0] = #30000 1'b0;
	choose[0] = #30000 1'b1;
	choose[0] = #30000 1'b0;
	choose[0] = #30000 1'b1;
	choose[0] = #30000 1'b0;
	choose[0] = #30000 1'b1;
	choose[0] = #30000 1'b0;
	choose[0] = #10000 1'b1;
	choose[0] = #10000 1'b0;
	choose[0] = #10000 1'b1;
	choose[0] = #10000 1'b0;
	choose[0] = #160000 1'b1;
	choose[0] = #20000 1'b0;
end 
// cin[ 15 ]
initial
begin
	cin[15] = 1'b0;
	cin[15] = #70000 1'b1;
	cin[15] = #10000 1'b0;
	cin[15] = #60000 1'b1;
	cin[15] = #10000 1'b0;
	cin[15] = #50000 1'b1;
	cin[15] = #10000 1'b0;
	cin[15] = #50000 1'b1;
	cin[15] = #10000 1'b0;
	cin[15] = #50000 1'b1;
	cin[15] = #10000 1'b0;
end 
// cin[ 14 ]
initial
begin
	cin[14] = 1'b1;
	cin[14] = #10000 1'b0;
	cin[14] = #60000 1'b1;
	cin[14] = #10000 1'b0;
	cin[14] = #300000 1'b1;
	cin[14] = #10000 1'b0;
	cin[14] = #10000 1'b1;
	cin[14] = #140000 1'b0;
end 
// cin[ 13 ]
initial
begin
	cin[13] = 1'b1;
	cin[13] = #10000 1'b0;
	cin[13] = #130000 1'b1;
	cin[13] = #10000 1'b0;
	cin[13] = #110000 1'b1;
	cin[13] = #10000 1'b0;
	cin[13] = #50000 1'b1;
	cin[13] = #10000 1'b0;
end 
// cin[ 12 ]
initial
begin
	cin[12] = 1'b0;
	cin[12] = #320000 1'b1;
	cin[12] = #10000 1'b0;
end 
// cin[ 11 ]
initial
begin
	cin[11] = 1'b0;
	cin[11] = #70000 1'b1;
	cin[11] = #10000 1'b0;
	cin[11] = #60000 1'b1;
	cin[11] = #10000 1'b0;
	cin[11] = #110000 1'b1;
	cin[11] = #20000 1'b0;
	cin[11] = #40000 1'b1;
	cin[11] = #20000 1'b0;
end 
// cin[ 10 ]
initial
begin
	cin[10] = 1'b1;
	cin[10] = #10000 1'b0;
	cin[10] = #60000 1'b1;
	cin[10] = #10000 1'b0;
	cin[10] = #70000 1'b1;
	cin[10] = #10000 1'b0;
	cin[10] = #40000 1'b1;
	cin[10] = #20000 1'b0;
	cin[10] = #40000 1'b1;
	cin[10] = #10000 1'b0;
end 
// cin[ 9 ]
initial
begin
	cin[9] = 1'b1;
	cin[9] = #10000 1'b0;
	cin[9] = #130000 1'b1;
	cin[9] = #10000 1'b0;
	cin[9] = #50000 1'b1;
	cin[9] = #20000 1'b0;
	cin[9] = #100000 1'b1;
	cin[9] = #20000 1'b0;
	cin[9] = #40000 1'b1;
	cin[9] = #10000 1'b0;
	cin[9] = #10000 1'b1;
	cin[9] = #140000 1'b0;
end 
// cin[ 8 ]
initial
begin
	cin[8] = 1'b1;
	cin[8] = #10000 1'b0;
	cin[8] = #60000 1'b1;
	cin[8] = #10000 1'b0;
	cin[8] = #60000 1'b1;
	cin[8] = #20000 1'b0;
	cin[8] = #40000 1'b1;
	cin[8] = #20000 1'b0;
	cin[8] = #110000 1'b1;
	cin[8] = #10000 1'b0;
end 
// cin[ 7 ]
initial
begin
	cin[7] = 1'b1;
	cin[7] = #10000 1'b0;
	cin[7] = #60000 1'b1;
	cin[7] = #10000 1'b0;
	cin[7] = #60000 1'b1;
	cin[7] = #10000 1'b0;
	cin[7] = #170000 1'b1;
	cin[7] = #10000 1'b0;
end 
// cin[ 6 ]
initial
begin
	cin[6] = 1'b0;
	cin[6] = #140000 1'b1;
	cin[6] = #10000 1'b0;
	cin[6] = #60000 1'b1;
	cin[6] = #10000 1'b0;
	cin[6] = #50000 1'b1;
	cin[6] = #10000 1'b0;
	cin[6] = #40000 1'b1;
	cin[6] = #20000 1'b0;
end 
// cin[ 5 ]
initial
begin
	cin[5] = 1'b0;
	cin[5] = #70000 1'b1;
	cin[5] = #10000 1'b0;
	cin[5] = #120000 1'b1;
	cin[5] = #10000 1'b0;
	cin[5] = #110000 1'b1;
	cin[5] = #10000 1'b0;
	cin[5] = #50000 1'b1;
	cin[5] = #10000 1'b0;
	cin[5] = #10000 1'b1;
	cin[5] = #140000 1'b0;
end 
// cin[ 4 ]
initial
begin
	cin[4] = 1'b0;
	cin[4] = #150000 1'b1;
	cin[4] = #10000 1'b0;
	cin[4] = #100000 1'b1;
	cin[4] = #10000 1'b0;
	cin[4] = #60000 1'b1;
	cin[4] = #10000 1'b0;
	cin[4] = #40000 1'b1;
	cin[4] = #10000 1'b0;
	cin[4] = #10000 1'b1;
	cin[4] = #140000 1'b0;
end 
// cin[ 3 ]
initial
begin
	cin[3] = 1'b1;
	cin[3] = #10000 1'b0;
	cin[3] = #60000 1'b1;
	cin[3] = #10000 1'b0;
	cin[3] = #60000 1'b1;
	cin[3] = #10000 1'b0;
	cin[3] = #110000 1'b1;
	cin[3] = #10000 1'b0;
	cin[3] = #110000 1'b1;
	cin[3] = #10000 1'b0;
	cin[3] = #10000 1'b1;
	cin[3] = #140000 1'b0;
end 
// cin[ 2 ]
initial
begin
	cin[2] = 1'b0;
	cin[2] = #20000 1'b1;
	cin[2] = #10000 1'b0;
	cin[2] = #50000 1'b1;
	cin[2] = #30000 1'b0;
	cin[2] = #30000 1'b1;
	cin[2] = #10000 1'b0;
	cin[2] = #10000 1'b1;
	cin[2] = #10000 1'b0;
	cin[2] = #30000 1'b1;
	cin[2] = #30000 1'b0;
	cin[2] = #30000 1'b1;
	cin[2] = #30000 1'b0;
	cin[2] = #30000 1'b1;
	cin[2] = #10000 1'b0;
	cin[2] = #10000 1'b1;
	cin[2] = #10000 1'b0;
	cin[2] = #30000 1'b1;
	cin[2] = #160000 1'b0;
end 
// cin[ 1 ]
initial
begin
	cin[1] = 1'b0;
	cin[1] = #40000 1'b1;
	cin[1] = #10000 1'b0;
	cin[1] = #20000 1'b1;
	cin[1] = #10000 1'b0;
	cin[1] = #30000 1'b1;
	cin[1] = #10000 1'b0;
	cin[1] = #30000 1'b1;
	cin[1] = #10000 1'b0;
	cin[1] = #10000 1'b1;
	cin[1] = #10000 1'b0;
	cin[1] = #20000 1'b1;
	cin[1] = #10000 1'b0;
	cin[1] = #20000 1'b1;
	cin[1] = #10000 1'b0;
	cin[1] = #20000 1'b1;
	cin[1] = #10000 1'b0;
	cin[1] = #20000 1'b1;
	cin[1] = #10000 1'b0;
	cin[1] = #50000 1'b1;
	cin[1] = #10000 1'b0;
	cin[1] = #20000 1'b1;
	cin[1] = #10000 1'b0;
	cin[1] = #10000 1'b1;
	cin[1] = #140000 1'b0;
	cin[1] = #30000 1'b1;
	cin[1] = #130000 1'b0;
end 
// cin[ 0 ]
initial
begin
	cin[0] = 1'b1;
	cin[0] = #20000 1'b0;
	cin[0] = #10000 1'b1;
	cin[0] = #20000 1'b0;
	cin[0] = #20000 1'b1;
	cin[0] = #10000 1'b0;
	cin[0] = #30000 1'b1;
	cin[0] = #10000 1'b0;
	cin[0] = #20000 1'b1;
	cin[0] = #10000 1'b0;
	cin[0] = #20000 1'b1;
	cin[0] = #10000 1'b0;
	cin[0] = #30000 1'b1;
	cin[0] = #10000 1'b0;
	cin[0] = #10000 1'b1;
	cin[0] = #10000 1'b0;
	cin[0] = #20000 1'b1;
	cin[0] = #20000 1'b0;
	cin[0] = #10000 1'b1;
	cin[0] = #10000 1'b0;
	cin[0] = #30000 1'b1;
	cin[0] = #10000 1'b0;
	cin[0] = #10000 1'b1;
	cin[0] = #10000 1'b0;
	cin[0] = #20000 1'b1;
	cin[0] = #10000 1'b0;
	cin[0] = #10000 1'b1;
	cin[0] = #140000 1'b0;
	cin[0] = #30000 1'b1;
	cin[0] = #10000 1'b0;
end 

RAM_vlg_sample_tst tb_sample (
	.choose(choose),
	.cin(cin),
	.clk(clk),
	.sampler_tx(sampler)
);

RAM_vlg_check_tst tb_out(
	.address(address),
	.clk_out(clk_out),
	.count_out(count_out),
	.dataout(dataout),
	.sampler_rx(sampler)
);
endmodule

