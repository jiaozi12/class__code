// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/05/2018 19:54:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Alu16
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Alu16_vlg_sample_tst(
	M,
	T,
	sampler_tx
);
input [1:0] M;
input [15:0] T;
output sampler_tx;

reg sample;
time current_time;
always @(M or T)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Alu16_vlg_check_tst (
	C,
	F,
	N,
	OV,
	Z,
	sampler_rx
);
input  C;
input [16:0] F;
input  N;
input  OV;
input  Z;
input sampler_rx;

reg  C_expected;
reg [16:0] F_expected;
reg  N_expected;
reg  OV_expected;
reg  Z_expected;

reg  C_prev;
reg [16:0] F_prev;
reg  N_prev;
reg  OV_prev;
reg  Z_prev;

reg  C_expected_prev;
reg [16:0] F_expected_prev;
reg  N_expected_prev;
reg  OV_expected_prev;
reg  Z_expected_prev;

reg  last_C_exp;
reg [16:0] last_F_exp;
reg  last_N_exp;
reg  last_OV_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	C_prev = C;
	F_prev = F;
	N_prev = N;
	OV_prev = OV;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	C_expected_prev = C_expected;
	F_expected_prev = F_expected;
	N_expected_prev = N_expected;
	OV_expected_prev = OV_expected;
	Z_expected_prev = Z_expected;
end


// expected F[ 16 ]
initial
begin
	F_expected[16] = 1'bX;
end 
// expected F[ 15 ]
initial
begin
	F_expected[15] = 1'bX;
end 
// expected F[ 14 ]
initial
begin
	F_expected[14] = 1'bX;
end 
// expected F[ 13 ]
initial
begin
	F_expected[13] = 1'bX;
end 
// expected F[ 12 ]
initial
begin
	F_expected[12] = 1'bX;
end 
// expected F[ 11 ]
initial
begin
	F_expected[11] = 1'bX;
end 
// expected F[ 10 ]
initial
begin
	F_expected[10] = 1'bX;
end 
// expected F[ 9 ]
initial
begin
	F_expected[9] = 1'bX;
end 
// expected F[ 8 ]
initial
begin
	F_expected[8] = 1'bX;
end 
// expected F[ 7 ]
initial
begin
	F_expected[7] = 1'bX;
end 
// expected F[ 6 ]
initial
begin
	F_expected[6] = 1'bX;
end 
// expected F[ 5 ]
initial
begin
	F_expected[5] = 1'bX;
end 
// expected F[ 4 ]
initial
begin
	F_expected[4] = 1'bX;
end 
// expected F[ 3 ]
initial
begin
	F_expected[3] = 1'bX;
end 
// expected F[ 2 ]
initial
begin
	F_expected[2] = 1'bX;
end 
// expected F[ 1 ]
initial
begin
	F_expected[1] = 1'bX;
end 
// expected F[ 0 ]
initial
begin
	F_expected[0] = 1'bX;
end 

// expected C
initial
begin
	C_expected = 1'bX;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
end 

// expected N
initial
begin
	N_expected = 1'bX;
end 

// expected OV
initial
begin
	OV_expected = 1'bX;
end 
// generate trigger
always @(C_expected or C or F_expected or F or N_expected or N or OV_expected or OV or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C = %b | expected F = %b | expected N = %b | expected OV = %b | expected Z = %b | ",C_expected_prev,F_expected_prev,N_expected_prev,OV_expected_prev,Z_expected_prev);
	$display("| real C = %b | real F = %b | real N = %b | real OV = %b | real Z = %b | ",C_prev,F_prev,N_prev,OV_prev,Z_prev);
`endif
	if (
		( C_expected_prev !== 1'bx ) && ( C_prev !== C_expected_prev )
		&& ((C_expected_prev !== last_C_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp = C_expected_prev;
	end
	if (
		( F_expected_prev[0] !== 1'bx ) && ( F_prev[0] !== F_expected_prev[0] )
		&& ((F_expected_prev[0] !== last_F_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[0] = F_expected_prev[0];
	end
	if (
		( F_expected_prev[1] !== 1'bx ) && ( F_prev[1] !== F_expected_prev[1] )
		&& ((F_expected_prev[1] !== last_F_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[1] = F_expected_prev[1];
	end
	if (
		( F_expected_prev[2] !== 1'bx ) && ( F_prev[2] !== F_expected_prev[2] )
		&& ((F_expected_prev[2] !== last_F_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[2] = F_expected_prev[2];
	end
	if (
		( F_expected_prev[3] !== 1'bx ) && ( F_prev[3] !== F_expected_prev[3] )
		&& ((F_expected_prev[3] !== last_F_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[3] = F_expected_prev[3];
	end
	if (
		( F_expected_prev[4] !== 1'bx ) && ( F_prev[4] !== F_expected_prev[4] )
		&& ((F_expected_prev[4] !== last_F_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[4] = F_expected_prev[4];
	end
	if (
		( F_expected_prev[5] !== 1'bx ) && ( F_prev[5] !== F_expected_prev[5] )
		&& ((F_expected_prev[5] !== last_F_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[5] = F_expected_prev[5];
	end
	if (
		( F_expected_prev[6] !== 1'bx ) && ( F_prev[6] !== F_expected_prev[6] )
		&& ((F_expected_prev[6] !== last_F_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[6] = F_expected_prev[6];
	end
	if (
		( F_expected_prev[7] !== 1'bx ) && ( F_prev[7] !== F_expected_prev[7] )
		&& ((F_expected_prev[7] !== last_F_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[7] = F_expected_prev[7];
	end
	if (
		( F_expected_prev[8] !== 1'bx ) && ( F_prev[8] !== F_expected_prev[8] )
		&& ((F_expected_prev[8] !== last_F_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[8] = F_expected_prev[8];
	end
	if (
		( F_expected_prev[9] !== 1'bx ) && ( F_prev[9] !== F_expected_prev[9] )
		&& ((F_expected_prev[9] !== last_F_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[9] = F_expected_prev[9];
	end
	if (
		( F_expected_prev[10] !== 1'bx ) && ( F_prev[10] !== F_expected_prev[10] )
		&& ((F_expected_prev[10] !== last_F_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[10] = F_expected_prev[10];
	end
	if (
		( F_expected_prev[11] !== 1'bx ) && ( F_prev[11] !== F_expected_prev[11] )
		&& ((F_expected_prev[11] !== last_F_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[11] = F_expected_prev[11];
	end
	if (
		( F_expected_prev[12] !== 1'bx ) && ( F_prev[12] !== F_expected_prev[12] )
		&& ((F_expected_prev[12] !== last_F_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[12] = F_expected_prev[12];
	end
	if (
		( F_expected_prev[13] !== 1'bx ) && ( F_prev[13] !== F_expected_prev[13] )
		&& ((F_expected_prev[13] !== last_F_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[13] = F_expected_prev[13];
	end
	if (
		( F_expected_prev[14] !== 1'bx ) && ( F_prev[14] !== F_expected_prev[14] )
		&& ((F_expected_prev[14] !== last_F_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[14] = F_expected_prev[14];
	end
	if (
		( F_expected_prev[15] !== 1'bx ) && ( F_prev[15] !== F_expected_prev[15] )
		&& ((F_expected_prev[15] !== last_F_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[15] = F_expected_prev[15];
	end
	if (
		( F_expected_prev[16] !== 1'bx ) && ( F_prev[16] !== F_expected_prev[16] )
		&& ((F_expected_prev[16] !== last_F_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[16] = F_expected_prev[16];
	end
	if (
		( N_expected_prev !== 1'bx ) && ( N_prev !== N_expected_prev )
		&& ((N_expected_prev !== last_N_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_N_exp = N_expected_prev;
	end
	if (
		( OV_expected_prev !== 1'bx ) && ( OV_prev !== OV_expected_prev )
		&& ((OV_expected_prev !== last_OV_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OV :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OV_expected_prev);
		$display ("     Real value = %b", OV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OV_exp = OV_expected_prev;
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Alu16_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] M;
reg [15:0] T;
// wires                                               
wire C;
wire [16:0] F;
wire N;
wire OV;
wire Z;

wire sampler;                             

// assign statements (if any)                          
Alu16 i1 (
// port map - connection between master ports and signals/registers   
	.C(C),
	.F(F),
	.M(M),
	.N(N),
	.OV(OV),
	.T(T),
	.Z(Z)
);
// M[ 1 ]
initial
begin
	M[1] = 1'b0;
	M[1] = #15000 1'b1;
	M[1] = #35000 1'b0;
	M[1] = #5000 1'b1;
	# 5000;
	repeat(94)
	begin
		M[1] = 1'b0;
		M[1] = #5000 1'b1;
		# 5000;
	end
end 
// M[ 0 ]
initial
begin
	M[0] = 1'b0;
	M[0] = #5000 1'b1;
	M[0] = #10000 1'b0;
	M[0] = #15000 1'b1;
	M[0] = #10000 1'b0;
	M[0] = #15000 1'b1;
	# 5000;
	repeat(94)
	begin
		M[0] = 1'b0;
		M[0] = #5000 1'b1;
		# 5000;
	end
end 
// T[ 15 ]
initial
begin
	T[15] = 1'b0;
	T[15] = #35000 1'b1;
	T[15] = #5000 1'b0;
	T[15] = #15000 1'b1;
	# 5000;
	repeat(94)
	begin
		T[15] = 1'b0;
		T[15] = #5000 1'b1;
		# 5000;
	end
end 
// T[ 14 ]
initial
begin
	T[14] = 1'b1;
	T[14] = #20000 1'b0;
	T[14] = #15000 1'b1;
	T[14] = #5000 1'b0;
	T[14] = #15000 1'b1;
	# 5000;
	repeat(94)
	begin
		T[14] = 1'b0;
		T[14] = #5000 1'b1;
		# 5000;
	end
end 
// T[ 13 ]
initial
begin
	T[13] = 1'b1;
	T[13] = #20000 1'b0;
	T[13] = #15000 1'b1;
	T[13] = #5000 1'b0;
	T[13] = #15000 1'b1;
	# 5000;
	repeat(94)
	begin
		T[13] = 1'b0;
		T[13] = #5000 1'b1;
		# 5000;
	end
end 
// T[ 12 ]
initial
begin
	T[12] = 1'b0;
	T[12] = #10000 1'b1;
	T[12] = #10000 1'b0;
	T[12] = #15000 1'b1;
	T[12] = #5000 1'b0;
	T[12] = #15000 1'b1;
	# 5000;
	repeat(94)
	begin
		T[12] = 1'b0;
		T[12] = #5000 1'b1;
		# 5000;
	end
end 
// T[ 11 ]
initial
begin
	T[11] = 1'b0;
	T[11] = #10000 1'b1;
	T[11] = #10000 1'b0;
	T[11] = #15000 1'b1;
	T[11] = #5000 1'b0;
	T[11] = #15000 1'b1;
	# 5000;
	repeat(94)
	begin
		T[11] = 1'b0;
		T[11] = #5000 1'b1;
		# 5000;
	end
end 
// T[ 10 ]
initial
begin
	T[10] = 1'b1;
	T[10] = #20000 1'b0;
	T[10] = #15000 1'b1;
	T[10] = #5000 1'b0;
	T[10] = #15000 1'b1;
	# 5000;
	repeat(94)
	begin
		T[10] = 1'b0;
		T[10] = #5000 1'b1;
		# 5000;
	end
end 
// T[ 9 ]
initial
begin
	T[9] = 1'b1;
	T[9] = #20000 1'b0;
	T[9] = #15000 1'b1;
	T[9] = #5000 1'b0;
	T[9] = #15000 1'b1;
	# 5000;
	repeat(94)
	begin
		T[9] = 1'b0;
		T[9] = #5000 1'b1;
		# 5000;
	end
end 
// T[ 8 ]
initial
begin
	T[8] = 1'b0;
	T[8] = #10000 1'b1;
	T[8] = #10000 1'b0;
	T[8] = #15000 1'b1;
	T[8] = #5000 1'b0;
	T[8] = #15000 1'b1;
	# 5000;
	repeat(94)
	begin
		T[8] = 1'b0;
		T[8] = #5000 1'b1;
		# 5000;
	end
end 
// T[ 7 ]
initial
begin
	T[7] = 1'b0;
	T[7] = #10000 1'b1;
	T[7] = #10000 1'b0;
	T[7] = #15000 1'b1;
	T[7] = #5000 1'b0;
	T[7] = #15000 1'b1;
	# 5000;
	repeat(94)
	begin
		T[7] = 1'b0;
		T[7] = #5000 1'b1;
		# 5000;
	end
end 
// T[ 6 ]
initial
begin
	T[6] = 1'b1;
	T[6] = #20000 1'b0;
	T[6] = #15000 1'b1;
	T[6] = #5000 1'b0;
	T[6] = #15000 1'b1;
	# 5000;
	repeat(94)
	begin
		T[6] = 1'b0;
		T[6] = #5000 1'b1;
		# 5000;
	end
end 
// T[ 5 ]
initial
begin
	T[5] = 1'b1;
	T[5] = #20000 1'b0;
	T[5] = #15000 1'b1;
	T[5] = #5000 1'b0;
	T[5] = #15000 1'b1;
	# 5000;
	repeat(94)
	begin
		T[5] = 1'b0;
		T[5] = #5000 1'b1;
		# 5000;
	end
end 
// T[ 4 ]
initial
begin
	T[4] = 1'b0;
	T[4] = #10000 1'b1;
	T[4] = #10000 1'b0;
	T[4] = #15000 1'b1;
	T[4] = #5000 1'b0;
	T[4] = #15000 1'b1;
	# 5000;
	repeat(94)
	begin
		T[4] = 1'b0;
		T[4] = #5000 1'b1;
		# 5000;
	end
end 
// T[ 3 ]
initial
begin
	T[3] = 1'b0;
	T[3] = #10000 1'b1;
	T[3] = #30000 1'b0;
	T[3] = #15000 1'b1;
	# 5000;
	repeat(94)
	begin
		T[3] = 1'b0;
		T[3] = #5000 1'b1;
		# 5000;
	end
end 
// T[ 2 ]
initial
begin
	T[2] = 1'b1;
	T[2] = #20000 1'b0;
	T[2] = #15000 1'b1;
	T[2] = #5000 1'b0;
	T[2] = #15000 1'b1;
	# 5000;
	repeat(94)
	begin
		T[2] = 1'b0;
		T[2] = #5000 1'b1;
		# 5000;
	end
end 
// T[ 1 ]
initial
begin
	T[1] = 1'b1;
	T[1] = #40000 1'b0;
	T[1] = #5000 1'b1;
	T[1] = #5000 1'b0;
	T[1] = #5000 1'b1;
	# 5000;
	repeat(94)
	begin
		T[1] = 1'b0;
		T[1] = #5000 1'b1;
		# 5000;
	end
end 
// T[ 0 ]
initial
begin
	T[0] = 1'b0;
	T[0] = #10000 1'b1;
	T[0] = #10000 1'b0;
	T[0] = #15000 1'b1;
	T[0] = #5000 1'b0;
	T[0] = #15000 1'b1;
	# 5000;
	repeat(94)
	begin
		T[0] = 1'b0;
		T[0] = #5000 1'b1;
		# 5000;
	end
end 

Alu16_vlg_sample_tst tb_sample (
	.M(M),
	.T(T),
	.sampler_tx(sampler)
);

Alu16_vlg_check_tst tb_out(
	.C(C),
	.F(F),
	.N(N),
	.OV(OV),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

