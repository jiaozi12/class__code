// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/16/2018 17:02:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Instruction_system
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Instruction_system_vlg_sample_tst(
	addr,
	clk,
	clr,
	sampler_tx
);
input [7:0] addr;
input  clk;
input  clr;
output sampler_tx;

reg sample;
time current_time;
always @(addr or clk or clr)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Instruction_system_vlg_check_tst (
	a,
	b,
	inst,
	sampler_rx
);
input [15:0] a;
input [15:0] b;
input [47:0] inst;
input sampler_rx;

reg [15:0] a_expected;
reg [15:0] b_expected;
reg [47:0] inst_expected;

reg [15:0] a_prev;
reg [15:0] b_prev;
reg [47:0] inst_prev;

reg [15:0] a_expected_prev;
reg [15:0] b_expected_prev;
reg [47:0] inst_expected_prev;

reg [15:0] last_a_exp;
reg [15:0] last_b_exp;
reg [47:0] last_inst_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	a_prev = a;
	b_prev = b;
	inst_prev = inst;
end

// update expected /o prevs

always @(trigger)
begin
	a_expected_prev = a_expected;
	b_expected_prev = b_expected;
	inst_expected_prev = inst_expected;
end


// expected a[ 15 ]
initial
begin
	a_expected[15] = 1'bX;
end 
// expected a[ 14 ]
initial
begin
	a_expected[14] = 1'bX;
end 
// expected a[ 13 ]
initial
begin
	a_expected[13] = 1'bX;
end 
// expected a[ 12 ]
initial
begin
	a_expected[12] = 1'bX;
end 
// expected a[ 11 ]
initial
begin
	a_expected[11] = 1'bX;
end 
// expected a[ 10 ]
initial
begin
	a_expected[10] = 1'bX;
end 
// expected a[ 9 ]
initial
begin
	a_expected[9] = 1'bX;
end 
// expected a[ 8 ]
initial
begin
	a_expected[8] = 1'bX;
end 
// expected a[ 7 ]
initial
begin
	a_expected[7] = 1'bX;
end 
// expected a[ 6 ]
initial
begin
	a_expected[6] = 1'bX;
end 
// expected a[ 5 ]
initial
begin
	a_expected[5] = 1'bX;
end 
// expected a[ 4 ]
initial
begin
	a_expected[4] = 1'bX;
end 
// expected a[ 3 ]
initial
begin
	a_expected[3] = 1'bX;
end 
// expected a[ 2 ]
initial
begin
	a_expected[2] = 1'bX;
end 
// expected a[ 1 ]
initial
begin
	a_expected[1] = 1'bX;
end 
// expected a[ 0 ]
initial
begin
	a_expected[0] = 1'bX;
end 
// expected b[ 15 ]
initial
begin
	b_expected[15] = 1'bX;
end 
// expected b[ 14 ]
initial
begin
	b_expected[14] = 1'bX;
end 
// expected b[ 13 ]
initial
begin
	b_expected[13] = 1'bX;
end 
// expected b[ 12 ]
initial
begin
	b_expected[12] = 1'bX;
end 
// expected b[ 11 ]
initial
begin
	b_expected[11] = 1'bX;
end 
// expected b[ 10 ]
initial
begin
	b_expected[10] = 1'bX;
end 
// expected b[ 9 ]
initial
begin
	b_expected[9] = 1'bX;
end 
// expected b[ 8 ]
initial
begin
	b_expected[8] = 1'bX;
end 
// expected b[ 7 ]
initial
begin
	b_expected[7] = 1'bX;
end 
// expected b[ 6 ]
initial
begin
	b_expected[6] = 1'bX;
end 
// expected b[ 5 ]
initial
begin
	b_expected[5] = 1'bX;
end 
// expected b[ 4 ]
initial
begin
	b_expected[4] = 1'bX;
end 
// expected b[ 3 ]
initial
begin
	b_expected[3] = 1'bX;
end 
// expected b[ 2 ]
initial
begin
	b_expected[2] = 1'bX;
end 
// expected b[ 1 ]
initial
begin
	b_expected[1] = 1'bX;
end 
// expected b[ 0 ]
initial
begin
	b_expected[0] = 1'bX;
end 
// expected inst[ 47 ]
initial
begin
	inst_expected[47] = 1'bX;
end 
// expected inst[ 46 ]
initial
begin
	inst_expected[46] = 1'bX;
end 
// expected inst[ 45 ]
initial
begin
	inst_expected[45] = 1'bX;
end 
// expected inst[ 44 ]
initial
begin
	inst_expected[44] = 1'bX;
end 
// expected inst[ 43 ]
initial
begin
	inst_expected[43] = 1'bX;
end 
// expected inst[ 42 ]
initial
begin
	inst_expected[42] = 1'bX;
end 
// expected inst[ 41 ]
initial
begin
	inst_expected[41] = 1'bX;
end 
// expected inst[ 40 ]
initial
begin
	inst_expected[40] = 1'bX;
end 
// expected inst[ 39 ]
initial
begin
	inst_expected[39] = 1'bX;
end 
// expected inst[ 38 ]
initial
begin
	inst_expected[38] = 1'bX;
end 
// expected inst[ 37 ]
initial
begin
	inst_expected[37] = 1'bX;
end 
// expected inst[ 36 ]
initial
begin
	inst_expected[36] = 1'bX;
end 
// expected inst[ 35 ]
initial
begin
	inst_expected[35] = 1'bX;
end 
// expected inst[ 34 ]
initial
begin
	inst_expected[34] = 1'bX;
end 
// expected inst[ 33 ]
initial
begin
	inst_expected[33] = 1'bX;
end 
// expected inst[ 32 ]
initial
begin
	inst_expected[32] = 1'bX;
end 
// expected inst[ 31 ]
initial
begin
	inst_expected[31] = 1'bX;
end 
// expected inst[ 30 ]
initial
begin
	inst_expected[30] = 1'bX;
end 
// expected inst[ 29 ]
initial
begin
	inst_expected[29] = 1'bX;
end 
// expected inst[ 28 ]
initial
begin
	inst_expected[28] = 1'bX;
end 
// expected inst[ 27 ]
initial
begin
	inst_expected[27] = 1'bX;
end 
// expected inst[ 26 ]
initial
begin
	inst_expected[26] = 1'bX;
end 
// expected inst[ 25 ]
initial
begin
	inst_expected[25] = 1'bX;
end 
// expected inst[ 24 ]
initial
begin
	inst_expected[24] = 1'bX;
end 
// expected inst[ 23 ]
initial
begin
	inst_expected[23] = 1'bX;
end 
// expected inst[ 22 ]
initial
begin
	inst_expected[22] = 1'bX;
end 
// expected inst[ 21 ]
initial
begin
	inst_expected[21] = 1'bX;
end 
// expected inst[ 20 ]
initial
begin
	inst_expected[20] = 1'bX;
end 
// expected inst[ 19 ]
initial
begin
	inst_expected[19] = 1'bX;
end 
// expected inst[ 18 ]
initial
begin
	inst_expected[18] = 1'bX;
end 
// expected inst[ 17 ]
initial
begin
	inst_expected[17] = 1'bX;
end 
// expected inst[ 16 ]
initial
begin
	inst_expected[16] = 1'bX;
end 
// expected inst[ 15 ]
initial
begin
	inst_expected[15] = 1'bX;
end 
// expected inst[ 14 ]
initial
begin
	inst_expected[14] = 1'bX;
end 
// expected inst[ 13 ]
initial
begin
	inst_expected[13] = 1'bX;
end 
// expected inst[ 12 ]
initial
begin
	inst_expected[12] = 1'bX;
end 
// expected inst[ 11 ]
initial
begin
	inst_expected[11] = 1'bX;
end 
// expected inst[ 10 ]
initial
begin
	inst_expected[10] = 1'bX;
end 
// expected inst[ 9 ]
initial
begin
	inst_expected[9] = 1'bX;
end 
// expected inst[ 8 ]
initial
begin
	inst_expected[8] = 1'bX;
end 
// expected inst[ 7 ]
initial
begin
	inst_expected[7] = 1'bX;
end 
// expected inst[ 6 ]
initial
begin
	inst_expected[6] = 1'bX;
end 
// expected inst[ 5 ]
initial
begin
	inst_expected[5] = 1'bX;
end 
// expected inst[ 4 ]
initial
begin
	inst_expected[4] = 1'bX;
end 
// expected inst[ 3 ]
initial
begin
	inst_expected[3] = 1'bX;
end 
// expected inst[ 2 ]
initial
begin
	inst_expected[2] = 1'bX;
end 
// expected inst[ 1 ]
initial
begin
	inst_expected[1] = 1'bX;
end 
// expected inst[ 0 ]
initial
begin
	inst_expected[0] = 1'bX;
end 
// generate trigger
always @(a_expected or a or b_expected or b or inst_expected or inst)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a = %b | expected b = %b | expected inst = %b | ",a_expected_prev,b_expected_prev,inst_expected_prev);
	$display("| real a = %b | real b = %b | real inst = %b | ",a_prev,b_prev,inst_prev);
`endif
	if (
		( a_expected_prev[0] !== 1'bx ) && ( a_prev[0] !== a_expected_prev[0] )
		&& ((a_expected_prev[0] !== last_a_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[0] = a_expected_prev[0];
	end
	if (
		( a_expected_prev[1] !== 1'bx ) && ( a_prev[1] !== a_expected_prev[1] )
		&& ((a_expected_prev[1] !== last_a_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[1] = a_expected_prev[1];
	end
	if (
		( a_expected_prev[2] !== 1'bx ) && ( a_prev[2] !== a_expected_prev[2] )
		&& ((a_expected_prev[2] !== last_a_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[2] = a_expected_prev[2];
	end
	if (
		( a_expected_prev[3] !== 1'bx ) && ( a_prev[3] !== a_expected_prev[3] )
		&& ((a_expected_prev[3] !== last_a_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[3] = a_expected_prev[3];
	end
	if (
		( a_expected_prev[4] !== 1'bx ) && ( a_prev[4] !== a_expected_prev[4] )
		&& ((a_expected_prev[4] !== last_a_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[4] = a_expected_prev[4];
	end
	if (
		( a_expected_prev[5] !== 1'bx ) && ( a_prev[5] !== a_expected_prev[5] )
		&& ((a_expected_prev[5] !== last_a_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[5] = a_expected_prev[5];
	end
	if (
		( a_expected_prev[6] !== 1'bx ) && ( a_prev[6] !== a_expected_prev[6] )
		&& ((a_expected_prev[6] !== last_a_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[6] = a_expected_prev[6];
	end
	if (
		( a_expected_prev[7] !== 1'bx ) && ( a_prev[7] !== a_expected_prev[7] )
		&& ((a_expected_prev[7] !== last_a_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[7] = a_expected_prev[7];
	end
	if (
		( a_expected_prev[8] !== 1'bx ) && ( a_prev[8] !== a_expected_prev[8] )
		&& ((a_expected_prev[8] !== last_a_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[8] = a_expected_prev[8];
	end
	if (
		( a_expected_prev[9] !== 1'bx ) && ( a_prev[9] !== a_expected_prev[9] )
		&& ((a_expected_prev[9] !== last_a_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[9] = a_expected_prev[9];
	end
	if (
		( a_expected_prev[10] !== 1'bx ) && ( a_prev[10] !== a_expected_prev[10] )
		&& ((a_expected_prev[10] !== last_a_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[10] = a_expected_prev[10];
	end
	if (
		( a_expected_prev[11] !== 1'bx ) && ( a_prev[11] !== a_expected_prev[11] )
		&& ((a_expected_prev[11] !== last_a_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[11] = a_expected_prev[11];
	end
	if (
		( a_expected_prev[12] !== 1'bx ) && ( a_prev[12] !== a_expected_prev[12] )
		&& ((a_expected_prev[12] !== last_a_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[12] = a_expected_prev[12];
	end
	if (
		( a_expected_prev[13] !== 1'bx ) && ( a_prev[13] !== a_expected_prev[13] )
		&& ((a_expected_prev[13] !== last_a_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[13] = a_expected_prev[13];
	end
	if (
		( a_expected_prev[14] !== 1'bx ) && ( a_prev[14] !== a_expected_prev[14] )
		&& ((a_expected_prev[14] !== last_a_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[14] = a_expected_prev[14];
	end
	if (
		( a_expected_prev[15] !== 1'bx ) && ( a_prev[15] !== a_expected_prev[15] )
		&& ((a_expected_prev[15] !== last_a_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[15] = a_expected_prev[15];
	end
	if (
		( b_expected_prev[0] !== 1'bx ) && ( b_prev[0] !== b_expected_prev[0] )
		&& ((b_expected_prev[0] !== last_b_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[0] = b_expected_prev[0];
	end
	if (
		( b_expected_prev[1] !== 1'bx ) && ( b_prev[1] !== b_expected_prev[1] )
		&& ((b_expected_prev[1] !== last_b_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[1] = b_expected_prev[1];
	end
	if (
		( b_expected_prev[2] !== 1'bx ) && ( b_prev[2] !== b_expected_prev[2] )
		&& ((b_expected_prev[2] !== last_b_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[2] = b_expected_prev[2];
	end
	if (
		( b_expected_prev[3] !== 1'bx ) && ( b_prev[3] !== b_expected_prev[3] )
		&& ((b_expected_prev[3] !== last_b_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[3] = b_expected_prev[3];
	end
	if (
		( b_expected_prev[4] !== 1'bx ) && ( b_prev[4] !== b_expected_prev[4] )
		&& ((b_expected_prev[4] !== last_b_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[4] = b_expected_prev[4];
	end
	if (
		( b_expected_prev[5] !== 1'bx ) && ( b_prev[5] !== b_expected_prev[5] )
		&& ((b_expected_prev[5] !== last_b_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[5] = b_expected_prev[5];
	end
	if (
		( b_expected_prev[6] !== 1'bx ) && ( b_prev[6] !== b_expected_prev[6] )
		&& ((b_expected_prev[6] !== last_b_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[6] = b_expected_prev[6];
	end
	if (
		( b_expected_prev[7] !== 1'bx ) && ( b_prev[7] !== b_expected_prev[7] )
		&& ((b_expected_prev[7] !== last_b_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[7] = b_expected_prev[7];
	end
	if (
		( b_expected_prev[8] !== 1'bx ) && ( b_prev[8] !== b_expected_prev[8] )
		&& ((b_expected_prev[8] !== last_b_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[8] = b_expected_prev[8];
	end
	if (
		( b_expected_prev[9] !== 1'bx ) && ( b_prev[9] !== b_expected_prev[9] )
		&& ((b_expected_prev[9] !== last_b_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[9] = b_expected_prev[9];
	end
	if (
		( b_expected_prev[10] !== 1'bx ) && ( b_prev[10] !== b_expected_prev[10] )
		&& ((b_expected_prev[10] !== last_b_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[10] = b_expected_prev[10];
	end
	if (
		( b_expected_prev[11] !== 1'bx ) && ( b_prev[11] !== b_expected_prev[11] )
		&& ((b_expected_prev[11] !== last_b_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[11] = b_expected_prev[11];
	end
	if (
		( b_expected_prev[12] !== 1'bx ) && ( b_prev[12] !== b_expected_prev[12] )
		&& ((b_expected_prev[12] !== last_b_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[12] = b_expected_prev[12];
	end
	if (
		( b_expected_prev[13] !== 1'bx ) && ( b_prev[13] !== b_expected_prev[13] )
		&& ((b_expected_prev[13] !== last_b_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[13] = b_expected_prev[13];
	end
	if (
		( b_expected_prev[14] !== 1'bx ) && ( b_prev[14] !== b_expected_prev[14] )
		&& ((b_expected_prev[14] !== last_b_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[14] = b_expected_prev[14];
	end
	if (
		( b_expected_prev[15] !== 1'bx ) && ( b_prev[15] !== b_expected_prev[15] )
		&& ((b_expected_prev[15] !== last_b_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[15] = b_expected_prev[15];
	end
	if (
		( inst_expected_prev[0] !== 1'bx ) && ( inst_prev[0] !== inst_expected_prev[0] )
		&& ((inst_expected_prev[0] !== last_inst_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[0] = inst_expected_prev[0];
	end
	if (
		( inst_expected_prev[1] !== 1'bx ) && ( inst_prev[1] !== inst_expected_prev[1] )
		&& ((inst_expected_prev[1] !== last_inst_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[1] = inst_expected_prev[1];
	end
	if (
		( inst_expected_prev[2] !== 1'bx ) && ( inst_prev[2] !== inst_expected_prev[2] )
		&& ((inst_expected_prev[2] !== last_inst_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[2] = inst_expected_prev[2];
	end
	if (
		( inst_expected_prev[3] !== 1'bx ) && ( inst_prev[3] !== inst_expected_prev[3] )
		&& ((inst_expected_prev[3] !== last_inst_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[3] = inst_expected_prev[3];
	end
	if (
		( inst_expected_prev[4] !== 1'bx ) && ( inst_prev[4] !== inst_expected_prev[4] )
		&& ((inst_expected_prev[4] !== last_inst_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[4] = inst_expected_prev[4];
	end
	if (
		( inst_expected_prev[5] !== 1'bx ) && ( inst_prev[5] !== inst_expected_prev[5] )
		&& ((inst_expected_prev[5] !== last_inst_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[5] = inst_expected_prev[5];
	end
	if (
		( inst_expected_prev[6] !== 1'bx ) && ( inst_prev[6] !== inst_expected_prev[6] )
		&& ((inst_expected_prev[6] !== last_inst_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[6] = inst_expected_prev[6];
	end
	if (
		( inst_expected_prev[7] !== 1'bx ) && ( inst_prev[7] !== inst_expected_prev[7] )
		&& ((inst_expected_prev[7] !== last_inst_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[7] = inst_expected_prev[7];
	end
	if (
		( inst_expected_prev[8] !== 1'bx ) && ( inst_prev[8] !== inst_expected_prev[8] )
		&& ((inst_expected_prev[8] !== last_inst_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[8] = inst_expected_prev[8];
	end
	if (
		( inst_expected_prev[9] !== 1'bx ) && ( inst_prev[9] !== inst_expected_prev[9] )
		&& ((inst_expected_prev[9] !== last_inst_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[9] = inst_expected_prev[9];
	end
	if (
		( inst_expected_prev[10] !== 1'bx ) && ( inst_prev[10] !== inst_expected_prev[10] )
		&& ((inst_expected_prev[10] !== last_inst_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[10] = inst_expected_prev[10];
	end
	if (
		( inst_expected_prev[11] !== 1'bx ) && ( inst_prev[11] !== inst_expected_prev[11] )
		&& ((inst_expected_prev[11] !== last_inst_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[11] = inst_expected_prev[11];
	end
	if (
		( inst_expected_prev[12] !== 1'bx ) && ( inst_prev[12] !== inst_expected_prev[12] )
		&& ((inst_expected_prev[12] !== last_inst_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[12] = inst_expected_prev[12];
	end
	if (
		( inst_expected_prev[13] !== 1'bx ) && ( inst_prev[13] !== inst_expected_prev[13] )
		&& ((inst_expected_prev[13] !== last_inst_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[13] = inst_expected_prev[13];
	end
	if (
		( inst_expected_prev[14] !== 1'bx ) && ( inst_prev[14] !== inst_expected_prev[14] )
		&& ((inst_expected_prev[14] !== last_inst_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[14] = inst_expected_prev[14];
	end
	if (
		( inst_expected_prev[15] !== 1'bx ) && ( inst_prev[15] !== inst_expected_prev[15] )
		&& ((inst_expected_prev[15] !== last_inst_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[15] = inst_expected_prev[15];
	end
	if (
		( inst_expected_prev[16] !== 1'bx ) && ( inst_prev[16] !== inst_expected_prev[16] )
		&& ((inst_expected_prev[16] !== last_inst_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[16] = inst_expected_prev[16];
	end
	if (
		( inst_expected_prev[17] !== 1'bx ) && ( inst_prev[17] !== inst_expected_prev[17] )
		&& ((inst_expected_prev[17] !== last_inst_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[17] = inst_expected_prev[17];
	end
	if (
		( inst_expected_prev[18] !== 1'bx ) && ( inst_prev[18] !== inst_expected_prev[18] )
		&& ((inst_expected_prev[18] !== last_inst_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[18] = inst_expected_prev[18];
	end
	if (
		( inst_expected_prev[19] !== 1'bx ) && ( inst_prev[19] !== inst_expected_prev[19] )
		&& ((inst_expected_prev[19] !== last_inst_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[19] = inst_expected_prev[19];
	end
	if (
		( inst_expected_prev[20] !== 1'bx ) && ( inst_prev[20] !== inst_expected_prev[20] )
		&& ((inst_expected_prev[20] !== last_inst_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[20] = inst_expected_prev[20];
	end
	if (
		( inst_expected_prev[21] !== 1'bx ) && ( inst_prev[21] !== inst_expected_prev[21] )
		&& ((inst_expected_prev[21] !== last_inst_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[21] = inst_expected_prev[21];
	end
	if (
		( inst_expected_prev[22] !== 1'bx ) && ( inst_prev[22] !== inst_expected_prev[22] )
		&& ((inst_expected_prev[22] !== last_inst_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[22] = inst_expected_prev[22];
	end
	if (
		( inst_expected_prev[23] !== 1'bx ) && ( inst_prev[23] !== inst_expected_prev[23] )
		&& ((inst_expected_prev[23] !== last_inst_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[23] = inst_expected_prev[23];
	end
	if (
		( inst_expected_prev[24] !== 1'bx ) && ( inst_prev[24] !== inst_expected_prev[24] )
		&& ((inst_expected_prev[24] !== last_inst_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[24] = inst_expected_prev[24];
	end
	if (
		( inst_expected_prev[25] !== 1'bx ) && ( inst_prev[25] !== inst_expected_prev[25] )
		&& ((inst_expected_prev[25] !== last_inst_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[25] = inst_expected_prev[25];
	end
	if (
		( inst_expected_prev[26] !== 1'bx ) && ( inst_prev[26] !== inst_expected_prev[26] )
		&& ((inst_expected_prev[26] !== last_inst_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[26] = inst_expected_prev[26];
	end
	if (
		( inst_expected_prev[27] !== 1'bx ) && ( inst_prev[27] !== inst_expected_prev[27] )
		&& ((inst_expected_prev[27] !== last_inst_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[27] = inst_expected_prev[27];
	end
	if (
		( inst_expected_prev[28] !== 1'bx ) && ( inst_prev[28] !== inst_expected_prev[28] )
		&& ((inst_expected_prev[28] !== last_inst_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[28] = inst_expected_prev[28];
	end
	if (
		( inst_expected_prev[29] !== 1'bx ) && ( inst_prev[29] !== inst_expected_prev[29] )
		&& ((inst_expected_prev[29] !== last_inst_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[29] = inst_expected_prev[29];
	end
	if (
		( inst_expected_prev[30] !== 1'bx ) && ( inst_prev[30] !== inst_expected_prev[30] )
		&& ((inst_expected_prev[30] !== last_inst_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[30] = inst_expected_prev[30];
	end
	if (
		( inst_expected_prev[31] !== 1'bx ) && ( inst_prev[31] !== inst_expected_prev[31] )
		&& ((inst_expected_prev[31] !== last_inst_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[31] = inst_expected_prev[31];
	end
	if (
		( inst_expected_prev[32] !== 1'bx ) && ( inst_prev[32] !== inst_expected_prev[32] )
		&& ((inst_expected_prev[32] !== last_inst_exp[32]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[32] = inst_expected_prev[32];
	end
	if (
		( inst_expected_prev[33] !== 1'bx ) && ( inst_prev[33] !== inst_expected_prev[33] )
		&& ((inst_expected_prev[33] !== last_inst_exp[33]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[33] = inst_expected_prev[33];
	end
	if (
		( inst_expected_prev[34] !== 1'bx ) && ( inst_prev[34] !== inst_expected_prev[34] )
		&& ((inst_expected_prev[34] !== last_inst_exp[34]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[34] = inst_expected_prev[34];
	end
	if (
		( inst_expected_prev[35] !== 1'bx ) && ( inst_prev[35] !== inst_expected_prev[35] )
		&& ((inst_expected_prev[35] !== last_inst_exp[35]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[35] = inst_expected_prev[35];
	end
	if (
		( inst_expected_prev[36] !== 1'bx ) && ( inst_prev[36] !== inst_expected_prev[36] )
		&& ((inst_expected_prev[36] !== last_inst_exp[36]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[36] = inst_expected_prev[36];
	end
	if (
		( inst_expected_prev[37] !== 1'bx ) && ( inst_prev[37] !== inst_expected_prev[37] )
		&& ((inst_expected_prev[37] !== last_inst_exp[37]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[37] = inst_expected_prev[37];
	end
	if (
		( inst_expected_prev[38] !== 1'bx ) && ( inst_prev[38] !== inst_expected_prev[38] )
		&& ((inst_expected_prev[38] !== last_inst_exp[38]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[38] = inst_expected_prev[38];
	end
	if (
		( inst_expected_prev[39] !== 1'bx ) && ( inst_prev[39] !== inst_expected_prev[39] )
		&& ((inst_expected_prev[39] !== last_inst_exp[39]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[39] = inst_expected_prev[39];
	end
	if (
		( inst_expected_prev[40] !== 1'bx ) && ( inst_prev[40] !== inst_expected_prev[40] )
		&& ((inst_expected_prev[40] !== last_inst_exp[40]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[40] = inst_expected_prev[40];
	end
	if (
		( inst_expected_prev[41] !== 1'bx ) && ( inst_prev[41] !== inst_expected_prev[41] )
		&& ((inst_expected_prev[41] !== last_inst_exp[41]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[41] = inst_expected_prev[41];
	end
	if (
		( inst_expected_prev[42] !== 1'bx ) && ( inst_prev[42] !== inst_expected_prev[42] )
		&& ((inst_expected_prev[42] !== last_inst_exp[42]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[42] = inst_expected_prev[42];
	end
	if (
		( inst_expected_prev[43] !== 1'bx ) && ( inst_prev[43] !== inst_expected_prev[43] )
		&& ((inst_expected_prev[43] !== last_inst_exp[43]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[43] = inst_expected_prev[43];
	end
	if (
		( inst_expected_prev[44] !== 1'bx ) && ( inst_prev[44] !== inst_expected_prev[44] )
		&& ((inst_expected_prev[44] !== last_inst_exp[44]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[44] = inst_expected_prev[44];
	end
	if (
		( inst_expected_prev[45] !== 1'bx ) && ( inst_prev[45] !== inst_expected_prev[45] )
		&& ((inst_expected_prev[45] !== last_inst_exp[45]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[45] = inst_expected_prev[45];
	end
	if (
		( inst_expected_prev[46] !== 1'bx ) && ( inst_prev[46] !== inst_expected_prev[46] )
		&& ((inst_expected_prev[46] !== last_inst_exp[46]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[46] = inst_expected_prev[46];
	end
	if (
		( inst_expected_prev[47] !== 1'bx ) && ( inst_prev[47] !== inst_expected_prev[47] )
		&& ((inst_expected_prev[47] !== last_inst_exp[47]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_inst_exp[47] = inst_expected_prev[47];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module Instruction_system_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] addr;
reg clk;
reg clr;
// wires                                               
wire [15:0] a;
wire [15:0] b;
wire [47:0] inst;

wire sampler;                             

// assign statements (if any)                          
Instruction_system i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.addr(addr),
	.b(b),
	.clk(clk),
	.clr(clr),
	.inst(inst)
);

// addr[7]
initial
begin
	addr[7] = 1'b0;
end 

// addr[6]
initial
begin
	addr[6] = 1'b0;
end 

// addr[5]
initial
begin
	addr[5] = 1'b0;
end 

// addr[4]
initial
begin
	addr[4] = 1'b0;
	addr[4] = #480000 1'b1;
	addr[4] = #360000 1'b0;
end 

// addr[3]
initial
begin
	addr[3] = 1'b0;
	addr[3] = #240000 1'b1;
	addr[3] = #240000 1'b0;
	addr[3] = #150000 1'b1;
	addr[3] = #210000 1'b0;
end 

// addr[2]
initial
begin
	addr[2] = 1'b0;
	addr[2] = #160000 1'b1;
	addr[2] = #80000 1'b0;
	addr[2] = #80000 1'b1;
	addr[2] = #160000 1'b0;
	addr[2] = #80000 1'b1;
	addr[2] = #70000 1'b0;
	addr[2] = #140000 1'b1;
	addr[2] = #70000 1'b0;
end 

// addr[1]
initial
begin
	addr[1] = 1'b0;
	addr[1] = #80000 1'b1;
	addr[1] = #160000 1'b0;
	addr[1] = #160000 1'b1;
	addr[1] = #160000 1'b0;
	addr[1] = #140000 1'b1;
	addr[1] = #140000 1'b0;
end 

// addr[0]
initial
begin
	addr[0] = 1'b0;
	addr[0] = #80000 1'b1;
	addr[0] = #80000 1'b0;
	addr[0] = #80000 1'b1;
	addr[0] = #80000 1'b0;
	addr[0] = #80000 1'b1;
	addr[0] = #80000 1'b0;
	addr[0] = #80000 1'b1;
	addr[0] = #70000 1'b0;
	addr[0] = #70000 1'b1;
	addr[0] = #70000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #500 1'b1;
	#500;
end 

// clr
initial
begin
	clr = 1'b0;
	clr = #70000 1'b1;
	clr = #10000 1'b0;
	clr = #70000 1'b1;
	clr = #10000 1'b0;
	clr = #70000 1'b1;
	clr = #10000 1'b0;
	clr = #70000 1'b1;
	clr = #10000 1'b0;
	clr = #70000 1'b1;
	clr = #10000 1'b0;
	clr = #70000 1'b1;
	clr = #10000 1'b0;
	clr = #70000 1'b1;
	clr = #10000 1'b0;
	clr = #60000 1'b1;
	clr = #10000 1'b0;
	clr = #60000 1'b1;
	clr = #10000 1'b0;
	clr = #60000 1'b1;
	clr = #10000 1'b0;
	clr = #60000 1'b1;
	clr = #10000 1'b0;
end 

Instruction_system_vlg_sample_tst tb_sample (
	.addr(addr),
	.clk(clk),
	.clr(clr),
	.sampler_tx(sampler)
);

Instruction_system_vlg_check_tst tb_out(
	.a(a),
	.b(b),
	.inst(inst),
	.sampler_rx(sampler)
);
endmodule

